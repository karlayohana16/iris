# -*- coding: utf-8 -*-
"""dashboard_rendimiento_exportable.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OxUxp6DagN1cFZ1VGSwGMA7dfQ_-DdpX
"""

pip install dash

pip install kaleido fpdf

import dash
from dash import html, dcc
from dash.dependencies import Input, Output
import plotly.express as px
import os
from fpdf import FPDF
import plotly.io as pio

# Figura de ejemplo (puedes usar la tuya)
df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")

# Inicializar la app Dash
app = dash.Dash(__name__)

# Layout con el botón y el mensaje
app.layout = html.Div([
    dcc.Graph(figure=fig),
    html.Button("Exportar Reporte PDF", id="exportar-btn", n_clicks=0),
    html.Div(id="mensaje-exportacion")
])

# Funciones para exportar
def guardar_graficas(figuras, carpeta="graficas_exportadas"):
    if not os.path.exists(carpeta):
        os.makedirs(carpeta)
    rutas = []
    for i, fig in enumerate(figuras):
        ruta = os.path.join(carpeta, f"grafica_{i+1}.png")
        try:
            fig.write_image(ruta, format="png", engine="kaleido")
            rutas.append(ruta)
        except Exception as e:
            print(f"Error al guardar {ruta}: {e}")
    return rutas

def generar_pdf_con_graficas(rutas_img, salida="reporte_graficas.pdf"):
    pdf = FPDF()
    for ruta in rutas_img:
        pdf.add_page()
        pdf.image(ruta, x=10, y=10, w=180)
    pdf.output(salida)
    return salida

# Callback para exportar el PDF
@app.callback(
    Output("mensaje-exportacion", "children"),
    Input("exportar-btn", "n_clicks"),
    prevent_initial_call=True
)
def exportar_pdf(n_clicks):
    try:
        figuras = [fig]  # Aquí usas tu(s) figura(s)
        rutas = guardar_graficas(figuras)
        archivo = generar_pdf_con_graficas(rutas)
        return f"Reporte generado exitosamente: {archivo}"
    except Exception as e:
        return f"Error generando el reporte: {str(e)}"

# Ejecutar el servidor
if __name__ == '__main__':
    app.run_server(debug=False, host='0.0.0.0', port=8050)